// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: transfers.sql

package db

import (
	"context"
	"time"
)

const createTransfer = `-- name: CreateTransfer :one
Insert into "Transfers" (
        "from_account",
        "to_account",
        "transaction_time",
        "amount"
    )
Values ($1, $2, $3, $4)
RETURNING id, from_account, to_account, transaction_time, amount
`

type CreateTransferParams struct {
	FromAccount     int64     `json:"from_account"`
	ToAccount       int64     `json:"to_account"`
	TransactionTime time.Time `json:"transaction_time"`
	Amount          int64     `json:"amount"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer,
		arg.FromAccount,
		arg.ToAccount,
		arg.TransactionTime,
		arg.Amount,
	)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccount,
		&i.ToAccount,
		&i.TransactionTime,
		&i.Amount,
	)
	return i, err
}

const deleteTransfer = `-- name: DeleteTransfer :one
Delete from "Transfers"
WHERE id = $1
RETURNING id, from_account, to_account, transaction_time, amount
`

func (q *Queries) DeleteTransfer(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, deleteTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccount,
		&i.ToAccount,
		&i.TransactionTime,
		&i.Amount,
	)
	return i, err
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, from_account, to_account, transaction_time, amount
from "Transfers"
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetTransfer(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccount,
		&i.ToAccount,
		&i.TransactionTime,
		&i.Amount,
	)
	return i, err
}

const listTransfers = `-- name: ListTransfers :many
SELECT id, from_account, to_account, transaction_time, amount
from "Transfers"
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListTransfersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTransfers(ctx context.Context, arg ListTransfersParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccount,
			&i.ToAccount,
			&i.TransactionTime,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransfer = `-- name: UpdateTransfer :exec
UPDATE "Transfers"
SET from_account = $2,
    to_account = $3,
    transaction_time = $4,
    amount = $5
WHERE id = $1
`

type UpdateTransferParams struct {
	ID              int64     `json:"id"`
	FromAccount     int64     `json:"from_account"`
	ToAccount       int64     `json:"to_account"`
	TransactionTime time.Time `json:"transaction_time"`
	Amount          int64     `json:"amount"`
}

func (q *Queries) UpdateTransfer(ctx context.Context, arg UpdateTransferParams) error {
	_, err := q.db.ExecContext(ctx, updateTransfer,
		arg.ID,
		arg.FromAccount,
		arg.ToAccount,
		arg.TransactionTime,
		arg.Amount,
	)
	return err
}
